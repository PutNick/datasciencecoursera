makeCacheMatrix <- function(x = matrix()){
  
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setinverse <- function(solve) m <<- solve
  getinverse <- function() m
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
  
}

## Function “makeCacheMatrix” creates a special “matrix” object that can cache its inverse. makeCacheMatrix contains 4 functions: set, get, setinverse, getinverse
## (1)get is a function that returns the matrix x stored in the main function.
## (2)set is a function that changes the vector stored in the main function.
## (3)setinverse and getmean are functions very similar to set and get.
## (4)They don’t calculate the mean, they simply store the value of the input in a variable m.
## (5)into the main function makeCacheMatrix (setinverse) and return it (getinverse).



cacheSolve <- function(x, ...){
  
  m <- x$getinverse()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  data <- x$get()
  m <- solve(data, ...)
  x$setinverse(m)
  m
}


## This function computes the 
## inverse of the special "matrix" 
## returned by makeCacheMatrix above. 
## If the inverse has already been calculated 
## (and the matrix has not changed), 
## then the cachesolve should retrieve the 
## inverse from the cache.
